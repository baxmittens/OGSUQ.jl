var documenterSearchIndex = {"docs":
[{"location":"lib/lib/#Library","page":"Library","title":"Library","text":"","category":"section"},{"location":"lib/lib/#Contents","page":"Library","title":"Contents","text":"","category":"section"},{"location":"lib/lib/","page":"Library","title":"Library","text":"Pages = [\"lib.md\"]\nDepth = 4","category":"page"},{"location":"lib/lib/#Functions","page":"Library","title":"Functions","text":"","category":"section"},{"location":"lib/lib/#Index","page":"Library","title":"Index","text":"","category":"section"},{"location":"lib/lib/","page":"Library","title":"Library","text":"Pages = [\"lib.md\"]","category":"page"},{"location":"lib/lib/#Typedefs","page":"Library","title":"Typedefs","text":"","category":"section"},{"location":"lib/lib/","page":"Library","title":"Library","text":"DistributedSparseGrids.AbstractSparseGrid\nDistributedSparseGrids.AbstractHierarchicalSparseGrid\nDistributedSparseGrids.PointDict","category":"page"},{"location":"lib/lib/#Structs","page":"Library","title":"Structs","text":"","category":"section"},{"location":"lib/lib/","page":"Library","title":"Library","text":"DistributedSparseGrids.CollocationPoint\nDistributedSparseGrids.HierarchicalCollocationPoint\nDistributedSparseGrids.AdaptiveHierarchicalSparseGrid","category":"page"},{"location":"lib/lib/#General-functions","page":"Library","title":"General functions","text":"","category":"section"},{"location":"lib/lib/","page":"Library","title":"Library","text":"init\ninterpolate\nintegrate\ninit_weights!\ninit_weights_inplace_ops!\ndistributed_init_weights!\ndistributed_init_weights_inplace_ops!\ngenerate_next_level!","category":"page"},{"location":"lib/lib/#Utils","page":"Library","title":"Utils","text":"","category":"section"},{"location":"lib/lib/","page":"Library","title":"Library","text":"DistributedSparseGrids.AHSG","category":"page"},{"location":"#OGSUQ.jl","page":"Home","title":"OGSUQ.jl","text":"","category":"section"},{"location":"#The-general-idea-for-the-creation-of-a-stochastic-OGS6-project","page":"Home","title":"The general idea for the creation of a stochastic OGS6 project","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The general idea is to always start with a fully configured and running deterministic OGS6 project. There are three basic functions which create three individual xml-files. These files are human-readable and can be manually configured and duplicated for the use in other projects.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The first function ","category":"page"},{"location":"","page":"Home","title":"Home","text":"generatePossibleStochasticParameters(\n\tprojectfile::String, \n\tfile::String=\"./PossibleStochasticParameters.xml\", \n\tkeywords::Vector{String}=ogs_numeric_keyvals\n\t)","category":"page"},{"location":"","page":"Home","title":"Home","text":"can be used to scan a existing projectfile for all existing possible stochastic parameter. What is considered a stochastic parameter is defined by the keywords. This generates an xml-file file where all possible stochastic parameters are listed. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"The second funtion","category":"page"},{"location":"","page":"Home","title":"Home","text":"generateStochasticOGSModell(\n\tprojectfile::String,\n\tsimcall::String,\n\tadditionalprojecfilespath::String,\n\tpostprocfile::Vector{String},\n\tstochpathes::Vector{String},\n\toutputpath=\"./Res\",\n\tstochmethod=AdaptiveHierarchicalSparseGrid,\n\tn_local_workers=50,\n\tkeywords=ogs_numeric_keyvals,\n\tsogsfile=\"StochasticOGSModelParams.xml\"\n\t)","category":"page"},{"location":"","page":"Home","title":"Home","text":"creates an xml-file which defines the so-called StochasticOGSModelParams. It is defined by ","category":"page"},{"location":"","page":"Home","title":"Home","text":"the location to the existing projectfile, \nthe simcall (e.g. \"path/to/ogs/bin/ogs\"), \na additionalprojecfilespath where meshes and other files can be located which are copied in each individual folder for a OGS6-snapshot, \nthe path to one or more postprocfiles, \nthe stochpathes, generated with generatePossibleStochasticParameters, manipulated by the user, and loaded by the loadStochasticParameters-function,\nan outputpath, where all snapshots will be stored,\na stochmethod (sparse grid or Monte-Carlo, where Monte-Carlo is not yet implemented),\nthe number of local workers n_local_workers, and, \nthe filename sogsfile under which the model is stored as an xml-file. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"This function also creates a file user_function.jl which is loaded by all workers and serves as an interface between OGS6 and Julia. Here it is defined how the individual snaptshots are generated and how the postprocessing results are handled.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The third and last function","category":"page"},{"location":"","page":"Home","title":"Home","text":"generateSampleMethodModel(\n\tsogsfile::String, \n\tanafile=\"SampleMethodParams.xml\"\n\t)\n# or\ngenerateSampleMethodModel(\n\tsogs::StochasticOGSModelParams, \n\tanafile=\"SampleMethodParams.xml\"\n\t)","category":"page"},{"location":"","page":"Home","title":"Home","text":"creates an xml-file anafile with all necessary parameters for the chosen sample method in the StochasticOGSModelParams.","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"In this chapter, Ex2 is taken a an example. The underlying deterministic OGS6 project is the point heat source example (Thermo-Richards-Mechanics project files).","category":"page"},{"location":"#Defining-the-stochastic-dimensions","page":"Home","title":"Defining the stochastic dimensions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The following lines of code ","category":"page"},{"location":"","page":"Home","title":"Home","text":"using OGSUQ\nprojectfile=\"./project/point_heat_source_2D.prj\"\npathes = generatePossibleStochasticParameters(projectfile)","category":"page"},{"location":"","page":"Home","title":"Home","text":"return an array of strings with OGS6-XML-pathes and generates an XML-file PossibleStochasticParameters.xml in the working directory","category":"page"},{"location":"","page":"Home","title":"Home","text":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Array\n\t julia:type=\"String,1\"\n>\n\t./media/medium/@id/0/phases/phase/?AqueousLiquid/properties/property/?specific_heat_capacity/value\n\t./media/medium/@id/0/phases/phase/?AqueousLiquid/properties/property/?thermal_conductivity/value\n\t\t\t.\n\t\t\t.\n\t\t\t.\n\t./parameters/parameter/?displacement0/values\n\t./parameters/parameter/?pressure_ic/values\n</Array>","category":"page"},{"location":"","page":"Home","title":"Home","text":"where all parameters possible to select as stochastic parameter are mapped. Since, in this example, an adaptive sparse grid collocation sampling shall be adopted, only two parameters, the porosity and the thermal conductivity of the aqueous liquid,","category":"page"},{"location":"","page":"Home","title":"Home","text":"./media/medium/@id/0/properties/property/?porosity/value\n./media/medium/@id/0/phases/phase/?AqueousLiquid/properties/property/?thermal_conductivity/value","category":"page"},{"location":"","page":"Home","title":"Home","text":"are selected. Thus, all other parameters are deleted from the file. The resulting xml-file is stored as altered_PossibleStochasticParameters.xml in the working directory.","category":"page"},{"location":"#Defining-the-stochastic-model","page":"Home","title":"Defining the stochastic model","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The following code snippet ","category":"page"},{"location":"","page":"Home","title":"Home","text":"using OGSUQ\nprojectfile=\"./project/point_heat_source_2D.prj\"\nsimcall=\"/path/to/ogs/bin/ogs\"\nadditionalprojecfilespath=\"./mesh\"\noutputpath=\"./Res\"\npostprocfiles=[\"PointHeatSource_ts_10_t_50000.000000.vtu\"]\noutputpath=\"./Res\"\nstochmethod=AdaptiveHierarchicalSparseGrid\nn_local_workers=50\n\nstochparampathes = loadStochasticParameters(\"altered_PossibleStochasticParameters.xml\")\n\t\nstochasticmodelparams = generateStochasticOGSModell(\n\tprojectfile,\n\tsimcall,\n\tadditionalprojecfilespath,\n\tpostprocfiles,\n\tstochparampathes,\n\toutputpath,\n\tstochmethod,\n\tn_local_workers) # generate the StochasticOGSModelParams\n\nsamplemethodparams = generateSampleMethodModel(stochasticmodelparams) # generate the SampleMethodParams","category":"page"},{"location":"","page":"Home","title":"Home","text":"generates two XML-files, StochasticOGSModelParams.xml and SampleMethodParams.xml, defining the stochastic model.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Again, these files are altered and stored under altered_StochasticOGSModelParams.xml and altered_SampleMethodParams.xml.","category":"page"},{"location":"","page":"Home","title":"Home","text":"In the former, the two stochastic parameters are altered. The probability distribution of the porosity is changed from Uniform to Normal with mean μ=0.375 and standard deviation σ=0.1.","category":"page"},{"location":"","page":"Home","title":"Home","text":"<StochasticOGS6Parameter\n\t path=\"./media/medium/@id/0/properties/property/?porosity/value\"\n\t valspec=\"1\"\n\t lower_bound=\"0.15\"\n\t upper_bound=\"0.60\"\n>\n\t<Normal\n\t\t julia:type=\"Float64\"\n\t\t julia:fieldname=\"dist\"\n\t\t μ=\"0.375\"\n\t\t σ=\"0.1\"\n\t/>\n</StochasticOGS6Parameter>","category":"page"},{"location":"","page":"Home","title":"Home","text":"Note that for efficiency, the normal distribution is changed to a truncated normal distribution by the parameters lower_bound=0.15 and upper_bound=0.60. This results in an integration error of approximately 2.5% for this example. See the picture below for a visualization of the normal distribution mathcalN and the truncated normal distribution barmathcalN.","category":"page"},{"location":"","page":"Home","title":"Home","text":"<p align=\"center\"> \t<img src=\"https://user-images.githubusercontent.com/100423479/223678210-58ebf8c4-731a-4a5e-9037-693f80d431b4.png\" width=\"350\" height=\"350\" /> </p>","category":"page"},{"location":"","page":"Home","title":"Home","text":"The second parameter, the thermal conductivity, is set up as a truncated normal distribution with mean μ=0.6, standard deviation σ=0.05, lower_bound=0.5, and, upper_bound=0.7. The multivariate truncated normal distribution resulting from the convolution of both one-dimensional distributions is pictured below. Note, that the distribution has been transformed to the domain -11^2 of the sparse grid.","category":"page"},{"location":"","page":"Home","title":"Home","text":"<p align=\"center\"> \t<img src=\"https://user-images.githubusercontent.com/100423479/223682880-2be481cc-986a-4f00-a47a-042d0b0684e5.png\" width=\"400\" height=\"250\" /> </p>","category":"page"},{"location":"","page":"Home","title":"Home","text":"The second file altered_SampleMethodParams.xml defines the sample method parameters such as","category":"page"},{"location":"","page":"Home","title":"Home","text":"the number of dimensions N=2,\nthe return type RT=\"VTUFile\" (see VTUFileHandler.jl)\nthe number of initial hierachical level of the sparse grid init_lvl=4,\nthe number of maximal hierarchical level of the sparse grid maxlvl=20, and,\nthe minimum hierarchical surplus for the adaptive refinement tol=100000.0.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Note, that the refinement tolerance was chosen as a large value since at the moment the reference value is the LinearAlgebra.norm(::VTUFile) of the entire result file.","category":"page"},{"location":"#Sampling-the-model","page":"Home","title":"Sampling the model","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The following lines of code","category":"page"},{"location":"","page":"Home","title":"Home","text":"using OGSUQ\nogsuqparams = OGSUQParams(\"altered_StochasticOGSModelParams.xml\", \"altered_SampleMethodParams.xml\")\nogsuqasg = OGSUQ.init(ogsuqparams)\nOGSUQ.start!(ogsuqasg)\nexpval,asg_expval = OGSUQ.𝔼(ogsuqasg)","category":"page"},{"location":"","page":"Home","title":"Home","text":"loads the parameters ogsuqparams, initializes the model ogsuqasg, and, starts the sampling procedure. Finally the expected value is integrated.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Initializing the model OGSUQ.init(ogsuqparams) consists of two steps","category":"page"},{"location":"","page":"Home","title":"Home","text":"1. Adding all local workers (in this case 50 local workers)\n2. Initializing the adaptive sparse grid.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Starting the sampling procedure OGSUQ.start!(ogsuqasg) first creates 4 initial hierarchical levels levels and, subsequently, starts the adaptive refinement.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This first stage results in an so-called *surrogate model* of the physical domain defined by the boundaries of the stochastic parameters\n\n| | |\n|:-------------------------:|:-------------------------:|\n|<img src=\"https://user-images.githubusercontent.com/100423479/223154558-4b94d7a2-e93b-45ef-9783-11437ae23b35.png\" width=\"350\" height=\"300\" /> |  <img src=\"https://user-images.githubusercontent.com/100423479/223125844-276bcb9b-8ce5-4072-9e20-11f6a3e67d7b.png\" width=\"300\" height=\"300\" />|\n| resulting sparse grid  | response surface |","category":"page"},{"location":"","page":"Home","title":"Home","text":"Computation of the expected value","category":"page"},{"location":"#DistributedSparseGrids.jl","page":"Home","title":"DistributedSparseGrids.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A Julia library that implements an Adaptive Sparse Grid collocation method for integrating memory-heavy objects generated on distributed workers (link to GitHub repository).","category":"page"},{"location":"","page":"Home","title":"Home","text":"For an alternative implementation, see AdaptiveSparseGrids.jl.","category":"page"},{"location":"#Contents","page":"Home","title":"Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"index.md\", \"lib/lib.md\"]\nDepth = 3","category":"page"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To mitigate the \"curse of dimensionality\" that occurs in the integration or interpolation of high-dimensional functions using tensor-product discretizations, sparse grids use Smolyak's quadrature rule. This is particularly useful if the evaluation of the underlying function is costly. In this library, an Adaptive Sparse Grid Collocation method with a local hierarchical Lagrangian basis, first proposed by Ma and Zabaras (2010), is implemented. For more information about the construction of Sparse Grids, see e.g. Gates and Bittens (2015).","category":"page"},{"location":"#Install","page":"Home","title":"Install","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"import Pkg\nPkg.install(\"DistributedSparseGrids\")","category":"page"},{"location":"#Implemented-features","page":"Home","title":"Implemented features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"-\tNested one-dimensional Clenshaw-Curtis rule","category":"page"},{"location":"","page":"Home","title":"Home","text":"-\tSmolyak's sparse grid construction","category":"page"},{"location":"","page":"Home","title":"Home","text":"-\tlocal hierarchical Lagrangian basis","category":"page"},{"location":"","page":"Home","title":"Home","text":"-\tdifferent pointsets (open, closed, halfopen)","category":"page"},{"location":"","page":"Home","title":"Home","text":"-\tadaptive refinement","category":"page"},{"location":"","page":"Home","title":"Home","text":"-\tdistributed function evaluation with Distributed.remotecall_fetch","category":"page"},{"location":"","page":"Home","title":"Home","text":"-\tmulti-threaded calculation of basis coefficients with Threads.@threads","category":"page"},{"location":"","page":"Home","title":"Home","text":"-\tusage of arbitrary return types ","category":"page"},{"location":"","page":"Home","title":"Home","text":"-\tintegration","category":"page"},{"location":"","page":"Home","title":"Home","text":"-\texperimental: integration over X_sim (i) (the X_sim (i)  notation indicates the set of all variables except X_i).","category":"page"},{"location":"#Usage-2","page":"Home","title":"Usage","text":"","category":"section"},{"location":"#Point-sets","page":"Home","title":"Point sets","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"When using sparse grids, one can choose whether the 2d second-level collocation points should lay on the boundary of the domain or in the middle between the origin and the boundary. (There are other choices as well.) This results in two different sparse grids, the former with almost all points on the boundary and on the coordinate axes, the latter with all points in the interior of the domain. Since one can choose for both one-dimensional children of the root point individually, there exist a multitude of different point sets for Sparse Grids.","category":"page"},{"location":"","page":"Home","title":"Home","text":"DistributedSparseGrids\nusing StaticArrays \n\nfunction sparse_grid(N::Int,pointpros,nlevel=6,RT=Float64,CT=Float64)\n\t# define collocation point\n\tCPType = CollocationPoint{N,CT}\n\t# define hierarchical collocation point\n\tHCPType = HierarchicalCollocationPoint{N,CPType,RT}\n\t# init grid\n\tasg = init(AHSG{N,HCPType},pointpros)\n\t#set of all collocation points\n\tcpts = Set{HierarchicalCollocationPoint{N,CPType,RT}}(collect(asg))\n\t# fully refine grid nlevel-1 times\n\tfor i = 1:nlevel-1\n\t\tunion!(cpts,generate_next_level!(asg))\n\tend\n\treturn asg\nend\n\n# define point properties \n#\t1->closed point set\n# \t2->open point set\n#\t3->left-open point set\n#\t4->right-open point set\n\nasg01 = sparse_grid(1, @SVector [1]) \nasg02 = sparse_grid(1, @SVector [2]) \nasg03 = sparse_grid(1, @SVector [3]) \n\nasg04 = sparse_grid(2, @SVector [1,1]) \nasg05 = sparse_grid(2, @SVector [2,2]) \nasg06 = sparse_grid(2, @SVector [1,2]) \nasg07 = sparse_grid(2, @SVector [2,1]) \nasg08 = sparse_grid(2, @SVector [3,3]) \nasg09 = sparse_grid(2, @SVector [4,4]) \nasg10 = sparse_grid(2, @SVector [3,1]) \nasg11 = sparse_grid(2, @SVector [2,3]) \nasg12 = sparse_grid(2, @SVector [4,2]) ","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: ) (Image: )","category":"page"},{"location":"#Integration-and-Interpolation","page":"Home","title":"Integration and Interpolation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"asg = sparse_grid(4, @SVector [1,1,1,1]) \n\n#define function: input are the coordinates x::SVector{N,CT} and an unique id ID::String (e.g. \"1_1_1_1\")\nfun1(x::SVector{N,CT},ID::String) = sum(x.^2)\n\n# initialize weights\n@time init_weights!(asg, fun1)\n\n# integration\nintegrate(asg)\n\n# interpolation\nx = rand(4)*2.0 .- 1.0\nval = interpolate(asg,x)\t","category":"page"},{"location":"#Distributed-function-evaluation","page":"Home","title":"Distributed function evaluation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"asg = sparse_grid(4, @SVector [1,1,1,1]) \n\n# add worker and register function to all workers\nusing Distributed\naddprocs(2)\nar_worker = workers()\n@everywhere begin\n    using StaticArrays\n    fun2(x::SVector{4,Float64},ID::String) = 1.0\nend\n\n# Evaluate the function on 2 workers\ndistributed_init_weights!(asg, fun2, ar_worker)","category":"page"},{"location":"#Using-custom-return-types","page":"Home","title":"Using custom return types","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"For custom return type T to work, following functions have to be implemented","category":"page"},{"location":"","page":"Home","title":"Home","text":"import Base: +,-,*,/,^,zero,zeros,one,ones,copy,deepcopy\n\n+(a::T, b::T) \n+(a::T, b::Float64) \n*(a::T, b::Float64) \n-(a::T, b::Matrix{Float64})\n-(a::T, b::Float64) \nzero(a::T) \nzeros(a::T) \none(a::T) \none(a::T) \ncopy(a::T)\ndeepcopy(a::T)","category":"page"},{"location":"","page":"Home","title":"Home","text":"This is already the case for many data types. Below  RT=Matrix{Float64} is used.","category":"page"},{"location":"","page":"Home","title":"Home","text":"# sparse grid with 5 dimensions and levels\npointpros = @SVector [1,2,3,4,1]\nasg = sparse_grid(5, pointpros, 6, Matrix{Float64}) \n\n# define function: input are the coordinates x::SVector{N,CT} and an unique id ID::String (e.g. \"1_1_1_1_1_1_1_1_1_1\"\n# for the root poin in five dimensions)\nfun3(x::SVector{N,CT},ID::String) = ones(100,100).*x[1]\n\n# initialize weights\n@time init_weights!(asg, fun3)","category":"page"},{"location":"#In-place-operations","page":"Home","title":"In-place operations","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"There are many mathematical operations executed which allocate memory while evaluating the hierarchical interpolator. Many of these allocations can be avoided by additionally implementing the in-place operations interface for data type T. At the moment, this feature is provided through the interface package AltInplaceOpsInterface.jl and LinearAlgebra.mul! (the code was initially written for Julia 0.6). In future releases, this interface could be rendered obsolete due to implementing standard julia interface function and proper broadcasting, but some research is probably still needed to implement this properly.","category":"page"},{"location":"","page":"Home","title":"Home","text":"import LinearAlgebra\nimport LinearAlgebra: mul!\nimport AltInplaceOpsInterface\n\nAltInplaceOpsInterface.add!(a::T, b::T) \nAltInplaceOpsInterface.add!(a::T, b::Float64)\nAltInplaceOpsInterface.minus!(a::T, b::T) \nAltInplaceOpsInterface.minus!(a::T, b::Float64)  \nAltInplaceOpsInterface.pow!(a::T, b::Float64)  \nLinearAlgebra.mul!(a::T, b::Float64) \nLinearAlgebra.mul!(a:T, b::T, c::Float64)","category":"page"},{"location":"","page":"Home","title":"Home","text":"For Matrix{Float64} this interface is already implemented.","category":"page"},{"location":"","page":"Home","title":"Home","text":"# initialize weights\n@time init_weights_inplace_ops!(asg, fun3)","category":"page"},{"location":"#Distributed-function-evaluation-and-in-place-operations","page":"Home","title":"Distributed function evaluation and in-place operations","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"# initialize weights\n@time distributed_init_weights_inplace_ops!(asg, fun3, ar_worker)","category":"page"},{"location":"#Adaptive-Refinement","page":"Home","title":"Adaptive Refinement","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"# Sparse Grid with 4 initial levels\npp = @SVector [1,1]\nasg = sparse_grid(2, pp, 4)\n\n# Function with curved singularity\nfun1(x::SVector{2,Float64},ID::String) =  (1.0-exp(-1.0*(abs(2.0 - (x[1]-1.0)^2.0 - (x[2]-1.0)^2.0) +0.01)))/(abs(2-(x[1]-1.0)^2.0-(x[2]-1.0)^2.0)+0.01)\n\ninit_weights!(asg, fun1)\n\n# adaptive refine\nfor i = 1:20\n# call generate_next_level! with tol=1e-5 and maxlevels=20\ncpts = generate_next_level!(asg, 1e-5, 20)\ninit_weights!(asg, collect(cpts), fun1)\nend\n\n# plot\nimport PlotlyJS\nsurfplot = PlotlyJS.surface(asg, 100)\ngridplot = PlotlyJS.scatter3d(asg)\nPlotlyJS.plot([surfplot, gridplot])","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: )","category":"page"},{"location":"#Plotting","page":"Home","title":"Plotting","text":"","category":"section"},{"location":"#d","page":"Home","title":"1d","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"# grid plots\nPlotlyJS.scatter(sg::AbstractHierarchicalSparseGrid{1,HCP}, lvl_offset::Bool=false; kwargs...) \nUnicodePlots.scatterplot(sg::AbstractHierarchicalSparseGrid{1,HCP}, lvl_offset::Bool=false)\n\n# response function plots\nUnicodePlots.lineplot(asg::AbstractHierarchicalSparseGrid{1,HCP}, npts = 1000, stoplevel::Int=numlevels(asg))\nPlotlyJS.surface(asg::SG, npts = 1000, stoplevel::Int=numlevels(asg); kwargs...)","category":"page"},{"location":"#d-2","page":"Home","title":"2d","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"# grid plots\nPlotlyJS.scatter(sg::AbstractHierarchicalSparseGrid{2,HCP}, lvl_offset::Float64=0.0, color_order::Bool=false) \nUnicodePlots.scatterplot(sg::AbstractHierarchicalSparseGrid{2,HCP})\nPlotlyJS.scatter3d(sg::AbstractHierarchicalSparseGrid{2,HCP}, color_order::Bool=false, maxp::Int=1)\n\n# response function plot\nPlotlyJS.surface(asg::AbstractHierarchicalSparseGrid{2,HCP}, npts = 20; kwargs...)","category":"page"},{"location":"#d-3","page":"Home","title":"3d","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"# grid plot\nPlotlyJS.scatter3d(sg::AbstractHierarchicalSparseGrid{3,HCP}, color_order::Bool=false, maxp::Int=1)","category":"page"},{"location":"#Contributions,-report-bugs-and-support","page":"Home","title":"Contributions, report bugs and support","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Contributions to or questions about this project are welcome. Feel free to create a issue or a pull request on GitHub.","category":"page"}]
}
